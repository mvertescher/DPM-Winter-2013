package motor;

import odometry.Odometer;
import lejos.nxt.NXTRegulatedMotor;

/**
 * MotorController.java
 * 
 * Controls all movement for the robot. 
 * Both high level and low level. 
 * 
 * @author Matthew Vertescher
 */
public class MotorController {

	/**
	 * Navigation object
	 */
	private Navigation navigation; 
	
	/**
	 * Odometer object 
	 */
	private Odometer odometer;
	//private static boolean done;
	
	/**
	 * Motor controls reference motor
	 */
	NXTRegulatedMotor leftMotor,rightMotor; 
	
	/**
	 * Robot constants
	 */
	private static double LEFT_RADIUS, RIGHT_RADIUS, WIDTH;
	
	
	private boolean interrupt = false; 
	
	/**
	 * Constructor
	 * @param odo
	 * @param leftmtr
	 * @param rightmtr
	 * @param leftradius
	 * @param rightradius
	 * @param width
	 */
	public MotorController (Odometer odo, NXTRegulatedMotor leftmtr, NXTRegulatedMotor rightmtr, double leftradius, double rightradius, double width) {
		this.leftMotor = leftmtr;
		this.rightMotor = rightmtr;
		this.LEFT_RADIUS = leftradius;
		this.RIGHT_RADIUS = rightradius;
		this.WIDTH = width;
		this.navigation = new Navigation(leftradius,rightradius,width);
		this.odometer = odo; 
		
		// Set initial speeds
		this.setCombinedSpeed(100);
		this.setAcceleration(1000);
	}
	
	/**
	 * Method used for ultrasonic localization sensing NOT USED
	 * @param control
	 * @param pd
	 */
	public void rotateUntilInterrupt(PolarDirection pd) {
		while (!interrupt) {
			this.incrementalRotation(pd);	
		}
	}
	
	/**
	 * Rotates the robot incrementally 
	 * @param pd
	 */
	public void incrementalRotation(PolarDirection pd) {
		if (pd == PolarDirection.CLOCKWISE) {
			leftMotor.rotate(10,true);
			rightMotor.rotate(-10,true);	
		}
		else if (pd == PolarDirection.COUNTERCLOCKWISE) {
			leftMotor.rotate(-10,true);
			rightMotor.rotate(10,true);	
		}
	}
	
	/**
	 * Has the robot move directly to a point without interrupt 
	 * @param x
	 * @param y
	 */
	public void travelImmediatelyTo(double x, double y) {
		double initX = odometer.getX();
		double initY = odometer.getY();
		turnToHeading(navigation.getPointToPointHeading(initX,initY,x,y));
		
		// Find the distance to point 
		double distance = navigation.getPointToPointDistance(initX,initY,x,y);

		// Move by the calculated distance 
		leftMotor.rotate(navigation.convertDistance(LEFT_RADIUS, distance), true);
		rightMotor.rotate(navigation.convertDistance(RIGHT_RADIUS, distance), false); 
	}
	
	/**
	 * Have the robot reverse directly to a point assumed to be behind it
	 * @param x
	 * @param y
	 */
	public void reverseImmediatelyBackwardsToPoint(double x, double y) {
		double distance = navigation.getPointToPointDistance(odometer.getX(),odometer.getY(),x,y);
		this.moveImmediatelyBy(-distance);
	}
	
	/**
	 * Turns the robot to a heading with respect to its current orientation
	 * @param finalTheta
	 */
	public void turnToHeading(double finalTheta) {
		double initTheta = odometer.getTheta();
		double heading = navigation.turnTo(initTheta, finalTheta);
		this.turnImmediatelyBy(heading);
	}
	
	/**
	 * Turns the robot to face a point with respect to its current orientation
	 * @param x
	 * @param y
	 */
	public void turnToPoint(double x, double y) {
		double initX = odometer.getX();
		double initY = odometer.getY();
		turnToHeading(navigation.getPointToPointHeading(initX,initY,x,y));
	}
	
	/**
	 * Moves the robot forward by some distance with out interruption
	 * @param d
	 */
	public void moveImmediatelyBy(double d) {
		leftMotor.rotate(navigation.convertDistance(LEFT_RADIUS, d), true);
		rightMotor.rotate(navigation.convertDistance(RIGHT_RADIUS, d), false);
	}
	
	/**
	 * Turns the robot immediately 
	 * @param theta
	 */
	public void turnImmediatelyBy(double theta) {
		leftMotor.rotate(navigation.convertAngle(LEFT_RADIUS, WIDTH, theta), true);
		rightMotor.rotate(-navigation.convertAngle(RIGHT_RADIUS, WIDTH, theta), false);
	}
	
	/**
	 * Sets the acceleration for both motors
	 */
	public void setAcceleration(int a) {
		leftMotor.setAcceleration(a);
		rightMotor.setAcceleration(a);
	}
	
	/**
	 * Stop both motors
	 */
	public void stopMotors() {
		leftMotor.stop(true);
		rightMotor.stop(false);
	}
	
	/**
	 * Move motors forward 
	 */
	public void moveForwardUntilStop() {
		for (NXTRegulatedMotor motor : new NXTRegulatedMotor[] { leftMotor, rightMotor }) 
			motor.forward();
	}
	
	/**
	 * Rotates the robot until stop motors is called
	 * @param pd
	 */
	public void rotateUntilStop(PolarDirection pd) {
		if (pd == PolarDirection.CLOCKWISE) {
			leftMotor.forward();
			rightMotor.backward();	
		}
		else if (pd == PolarDirection.COUNTERCLOCKWISE) {
			leftMotor.backward();
			rightMotor.forward();	
		}
	}	
	
	/**
	 * Move motors backwards
	 */
	public void moveBackwards() {
		for (NXTRegulatedMotor motor : new NXTRegulatedMotor[] { leftMotor, rightMotor }) 
			motor.backward();
	}
	
	/**
	 * Float both motors
	 */
	public void floatMotors() {
		for (NXTRegulatedMotor motor : new NXTRegulatedMotor[] { leftMotor, rightMotor }) {
			motor.forward();
			motor.flt();
		}
	}
	
	/**
	 * Set the speed of both motors
	 * @param s
	 */
	public void setCombinedSpeed(int s) {
		this.setLeftMotorSpeed(s);
		this.setRightMotorSpeed(s);
	}
	 
	/**
	 * Set the speed of the left motor
	 * @param s
	 */
	public void setLeftMotorSpeed(int s) {
		leftMotor.setSpeed(s);
	}
	
	/**
	 * Set speed of the right motor
	 * @param s
	 */
	public void setRightMotorSpeed(int s) {
		rightMotor.setSpeed(s);
	}
}
