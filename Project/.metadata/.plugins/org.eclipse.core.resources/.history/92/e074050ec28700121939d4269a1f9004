package pathfinding;

import lejos.robotics.pathfinding.AstarSearchAlgorithm;
import robot.CompassDirection;
import robot.Robot;

/**
 * Pathfinder.java
 * 
 * Class dedicated to finding the optimal path to a point
 * 
 * @author Matthew Vertescher
 *
 */
public class Pathfinder {
	
	private Robot robot;
	private GridMap map;
	private AstarSearchAlgorithm aStar;
	
	public Pathfinder(Robot r) {
		this.robot = r;
		this.map = new GridMap();
		aStar = new AstarSearchAlgorithm();
	}

	
	/**
	 * Removes a node in an adjacent tile
	 * @param cmpdir
	 */
	private void removeAdjacentNode(CompassDirection cmpdir) {
		//Node cur = this.getClosestNode(robot.getX(), robot.getY());
		switch (cmpdir) {
			case NORTH:
				this.map.mapObstacleAtPoint(robot.getX(),robot.getY()+20);
				break;
			case SOUTH:
				this.map.mapObstacleAtPoint(robot.getX(),robot.getY()-20);
				break;
			case EAST:
				this.map.mapObstacleAtPoint(robot.getX()+20,robot.getY());
				break;
			case WEST:
				this.map.mapObstacleAtPoint(robot.getX()-20,robot.getY());
				break;
			default:
				break;
				
		}
		//Sound.twoBeeps();
		
	}
	
}
