package subsumption;

import lejos.geom.Point;
import lejos.robotics.subsumption.Arbitrator;
import robot.Robot;

public abstract class AbstractBot {
	
	private Robot robot; 
	private Arbitrator arbitrator;
	private boolean lost = true;
	
	public AbstractBot(Robot r) {
		this.robot = r;
	}
	
	// Note that the highest priority is the highest index
	public void start() {
		arbitrator.start();
	}

	public Arbitrator getArbitrator() {
		return arbitrator;
	}

	public void setArbitrator(Arbitrator a) {
		this.arbitrator = a;
	}

	public boolean isLost() {
		return this.lost;
	}
	
	public void setLost(boolean l) {
		this.lost = l;
	}
	
	public void localize() {
		robot.localize();
	}

	
	public void turnToPoint(double x, double y) {
		this.robot.turnToPoint(x,y);
	}

	public void stopMoving() {
		this.robot.stopMotors();
	}
	
	public boolean obstacleDetected() {
		return (robot.getLeftUltrasonicDistance() < 20);
	}

	public void moveToPoint(Point p) {
		this.robot.turnToPoint(p.getX(),p.getY());
		this.robot.moveForwardUntilStop();
		// Check if at destination 
		while (!atDestination(p) && !obstacleDetected())  
			snooze(30);
		this.robot.stopMotors();
	}

	public boolean atDestination(Point p) {
		return (Math.abs(p.getX() - robot.getX()) < 2 && Math.abs(p.getY() - robot.getY()) < 2);
	}
	
	
	private void snooze(int milliseconds) {
		try { Thread.sleep(milliseconds); } catch (InterruptedException e) { e.printStackTrace(); }
	}
}
